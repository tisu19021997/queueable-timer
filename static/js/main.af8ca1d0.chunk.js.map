{"version":3,"sources":["components/ting.mp3","components/timer-queue.js","helper/function.js","components/timer-controller.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimerQueue","props","id","label","formattedTime","key","className","hourToSecond","minuteToSecond","timeUnitToStr","unitOfTime","zeroPrefix","timeUnit","parseInt","slice","timeToStr","time","hour","minute","second","toOneBiggerUnit","biggerUnitTime","Math","floor","remaining","converted","TimerController","state","queue","count","handleInputChange","bind","runTimer","prevProps","timeRemaining","this","document","getElementById","play","length","e","target","setState","name","value","onRun","shift","preventDefault","helper","onQueue","audio","Audio","process","currentQueue","showQueue","toggleModal","map","item","myRef","React","createRef","onSubmit","onChange","type","placeholder","onClick","ref","src","SoundFile","kind","width","height","viewBox","fill","xmlns","x","y","transform","Component","Timer","running","timeObj","noSleep","NoSleep","seconds","timeToSecond","enable","interval","setInterval","theTime","sec","secondToTime","clearInterval","taskName","taskTime","cx","cy","r","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af8ca1d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.23eedce0.mp3\";","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TimerQueue(props) {\n  const { id, label, formattedTime } = props;\n  return (\n    <li key={id} className=\"queue__item\">\n      <span className=\"queue__label\">{label}</span>\n      <span className=\"queue__time\">{formattedTime}</span>\n    </li>\n  );\n}\n\nTimerQueue.propTypes = {\n  id: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  formattedTime: PropTypes.string.isRequired,\n};\n\nexport default TimerQueue;\n","const hourToSecond = 3600;\nconst minuteToSecond = 60;\n\n// Add the zero prefix for time, for example: \"7\" into \"07\"\n/**\n *\n * @param {} time\n */\nexport function addZeroPrefix(time) {\n  return (`0${time}`).slice(-2);\n}\n\n/**\n * Convert unit of time to string.\n *\n * @param {string|number} unitOfTime Unit of time to convert\n * @param {boolean} zeroPrefix Whether to add zero prefix or not\n */\nexport function timeUnitToStr(unitOfTime, zeroPrefix = true) {\n  let timeUnit = unitOfTime;\n\n  if (parseInt(unitOfTime, 10) < 10 && zeroPrefix) {\n    timeUnit = addZeroPrefix(unitOfTime);\n  }\n\n  return timeUnit;\n}\n\n/**\n * Convert time object to string with the format hh:mm:ss\n *\n * @param {object} time The time object\n */\nexport function timeToStr(time) {\n  return `${timeUnitToStr(time.hour)}:${timeUnitToStr(time.minute)}:${timeUnitToStr(time.second)}`;\n}\n\n/**\n * Convert an amount of seconds to time object\n *\n * @param {number} second The amount of seconds to convert\n */\nexport function secondToTime(second) {\n  let hour = 0;\n  let minute = 0;\n  let sec = 0;\n\n  if (second >= hourToSecond) {\n    // divide the second by 3600 and take the integer part\n    hour = Math.floor(second / hourToSecond);\n  }\n\n  // calculate the amount of seconds that can not be converted to hour\n  sec = second - hour * hourToSecond;\n\n  // do the same for the minute party\n  if (sec >= minuteToSecond) {\n    minute = Math.floor(sec / minuteToSecond);\n  }\n\n  sec -= minute * minuteToSecond;\n\n  return {\n    hour,\n    minute,\n    second: sec,\n  };\n}\n\n/**\n * Convert time object into seconds\n *\n * @param {object} time The time object\n */\nexport function timeToSecond(time) {\n  return (\n    parseInt(time.hour * hourToSecond, 10)\n    + parseInt(time.minute * minuteToSecond, 10)\n    + parseInt(time.second, 10)\n  );\n}\n\n/**\n * Convert smaller time unit to one level larger time unit.\n *\n * @param {number} time Time to convert\n */\nexport function toOneBiggerUnit(time) {\n  const biggerUnitTime = Math.floor(time / minuteToSecond);\n\n  return {\n    remaining: time - biggerUnitTime * minuteToSecond,\n    converted: biggerUnitTime,\n  };\n}\n\n/**\n * Normalize the time.\n *\n * @param {object} time The time Object\n */\nexport function normalizeTime(time) {\n  let hour = parseInt(time.hour, 10);\n  let minute = parseInt(time.minute, 10);\n  let second = parseInt(time.second, 10);\n\n  if (second >= minuteToSecond) {\n    second = toOneBiggerUnit(second);\n    minute = second.converted + minute;\n    second = second.remaining;\n  }\n\n  if (minute >= minuteToSecond) {\n    minute = toOneBiggerUnit(minute);\n    hour = minute.converted + hour;\n    minute = minute.remaining;\n  }\n\n  return { hour, minute, second };\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TimerQueue from './timer-queue';\nimport SoundFile from './ting.mp3';\nimport * as helper from '../helper/function';\n\nclass TimerController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      queue: [],\n      count: 0,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.queue = this.queue.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { timeRemaining } = this.props;\n    const { queue } = this.state;\n\n    // catch the moment when one cycle of timer is finished\n    if (prevProps.timeRemaining !== 0 && timeRemaining === 0) {\n      document.getElementById('ting').play();\n\n      // if queue is not empty, then continue to run\n      if (queue.length) {\n        this.runTimer();\n      }\n    }\n  }\n\n  handleInputChange(e) {\n    const { target } = e;\n\n    this.setState({\n      [target.name]: target.value ? target.value : 0,\n    });\n  }\n\n  runTimer() {\n    const { queue, count } = this.state;\n    const { onRun } = this.props;\n\n    if (queue.length <= 0) {\n      return;\n    }\n\n    const topOfQueue = queue.shift();\n\n    onRun(topOfQueue);\n\n    this.setState({\n      count: count - 1,\n    });\n  }\n\n  queue(e) {\n    e.preventDefault();\n\n    const {\n      hour = 0, minute = 0, second = 0, count, queue, label,\n    } = this.state;\n    const time = helper.normalizeTime({ hour, minute, second });\n\n    if (hour || minute || second) {\n      this.setState({\n        count: count + 1,\n        queue: [\n          ...queue,\n          {\n            id: count,\n            hour: time.hour || 0,\n            minute: time.minute || 0,\n            second: time.second || 0,\n            label: label || 'Default Label',\n            formattedTime: helper.timeToStr(time),\n          },\n        ],\n      });\n    }\n\n    const { onQueue } = this.props;\n\n    onQueue(time, count);\n  }\n\n  playSound() {\n    this.audio = new Audio(`${process.env.PUBLIC_URL}/ting.mp3`);\n    this.audio.play();\n  }\n\n  render() {\n    let currentQueue;\n    const { queue } = this.state;\n    const { showQueue, toggleModal } = this.props;\n\n    if (queue.length) {\n      currentQueue = queue.map((item) => (\n        <TimerQueue\n          id={item.id}\n          label={item.label}\n          formattedTime={item.formattedTime}\n          onRun={this.runTimer}\n        />\n      ));\n    }\n\n    this.myRef = React.createRef();\n\n    return (\n      <div>\n        <form onSubmit={this.queue} className=\"form\">\n\n          <div className=\"form__title\">New task</div>\n\n          <div className=\"form__control\">\n\n            <div className=\"form__group\">\n              <div className=\"form__group-label\">Give your task a name</div>\n              <div className=\"form__group-input\">\n                <input\n                  onChange={this.handleInputChange}\n                  name=\"label\"\n                  type=\"text\"\n                  placeholder=\"name\"\n                />\n              </div>\n            </div>\n\n            <div className=\"form__group\">\n              <div className=\"form__group-label\">How long does it take?</div>\n              <div className=\"form__group-input\">\n                <input\n                  onChange={this.handleInputChange}\n                  name=\"hour\"\n                  type=\"number\"\n                  placeholder=\"hh\"\n                />\n\n                <input\n                  onChange={this.handleInputChange}\n                  name=\"minute\"\n                  type=\"number\"\n                  placeholder=\"mm\"\n                />\n\n                <input\n                  onChange={this.handleInputChange}\n                  name=\"second\"\n                  type=\"number\"\n                  placeholder=\"ss\"\n                />\n              </div>\n            </div>\n\n            <input className=\"form__submit-btn\" type=\"submit\" value=\"Add to queue\" />\n            <button className=\"btn--top-right\" type=\"button\" onClick={this.runTimer}>Run</button>\n          </div>\n\n        </form>\n\n        <audio id=\"ting\" ref={this.myRef} src={SoundFile}>\n          <track kind=\"captions\" />\n        </audio>\n\n        {showQueue ? (\n          <div className=\"queue__modal\">\n            <div className=\"queue__title\">current queue</div>\n\n            <button\n              type=\"button\"\n              className=\"close\"\n              onClick={toggleModal}\n            >\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 7 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"0.969925\" y=\"0.434853\" width=\"0.560681\" height=\"6.72818\" transform=\"rotate(-45 0.969925 0.434853)\" fill=\"black\" />\n                <rect x=\"5.68907\" width=\"0.560681\" height=\"6.72818\" transform=\"rotate(45 5.68907 0)\" fill=\"black\" />\n              </svg>\n            </button>\n\n            <ol className=\"queue\">\n              {currentQueue}\n            </ol>\n          </div>\n        ) : ''}\n\n      </div>\n    );\n  }\n}\n\nTimerController.propTypes = {\n  timeRemaining: PropTypes.number.isRequired,\n  onRun: PropTypes.func.isRequired,\n  onQueue: PropTypes.func.isRequired,\n  showQueue: PropTypes.bool.isRequired,\n};\n\nexport default TimerController;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport NoSleep from 'nosleep.js';\nimport TimerController from './timer-controller';\nimport {\n  timeToSecond,\n  secondToTime,\n  timeToStr,\n} from '../helper/function';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      queue: [],\n      timeRemaining: 0,\n      running: null,\n      showQueue: false,\n    };\n\n    this.onRun = this.onRun.bind(this);\n    this.onQueue = this.onQueue.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  onQueue(time, count) {\n    const { queue } = this.state;\n\n    this.setState({\n      queue: [\n        ...queue,\n        {\n          id: count,\n          label: time.label,\n          hour: time.hour,\n          minute: time.minute,\n          second: time.second,\n        },\n      ],\n    });\n  }\n\n  onRun(time) {\n    const timeObj = time;\n    const noSleep = new NoSleep();\n    let seconds = timeToSecond(timeObj);\n    noSleep.enable();\n\n    const interval = setInterval(() => {\n      const theTime = secondToTime(seconds);\n\n      this.setState({\n        time: timeToStr(theTime),\n        label: time.label,\n        timeRemaining: seconds,\n        running: time,\n      });\n\n      if (seconds === 0) {\n        clearInterval(interval);\n      }\n\n      seconds -= 1;\n    }, 1000);\n  }\n\n  toggleModal() {\n    const { showQueue } = this.state;\n    this.setState({\n      showQueue: !showQueue,\n    });\n  }\n\n  render() {\n    const {\n      time, timeRemaining, running, label, showQueue,\n    } = this.state;\n\n    const taskName = !running ? 'Nothing' : label;\n    const taskTime = !running ? '00:00:00' : time;\n\n    return (\n      <div className=\"wrapper\">\n\n        <div className=\"page-header\">\n          <div className=\"page-title\">queue -able timer</div>\n\n          <button\n            type=\"button\"\n            className=\"page-menu\"\n            onClick={this.toggleModal}\n          >\n            <svg width=\"6\" height=\"22\" viewBox=\"0 0 6 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#333333\" />\n              <circle cx=\"3\" cy=\"11\" r=\"3\" fill=\"#333333\" />\n              <circle cx=\"3\" cy=\"19\" r=\"3\" fill=\"#333333\" />\n            </svg>\n          </button>\n        </div>\n\n\n        <div className=\"task\">\n          <div className=\"task__name\">{taskName}</div>\n          <div className=\"task__time\">{taskTime}</div>\n        </div>\n\n        <TimerController\n          onRun={this.onRun}\n          onQueue={this.onQueue}\n          showQueue={showQueue}\n          toggleModal={this.toggleModal}\n          timeRemaining={timeRemaining}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}