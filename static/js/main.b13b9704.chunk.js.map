{"version":3,"sources":["components/ting.mp3","components/timer-queue.js","helper/function.js","components/timer-controller.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimerQueue","key","this","props","id","label","formattedTime","React","Component","hourToSecond","minuteToSecond","timeUnitToStr","unitOfTime","zeroPrefix","timeUnit","parseInt","slice","timeToStr","time","hour","minute","second","toOneBiggerUnit","biggerUnitTime","Math","floor","remaining","converted","TimerController","state","queue","count","handleInputChange","bind","runTimer","prevProps","timeRemaining","document","getElementById","play","length","e","target","setState","name","value","onRun","shift","preventDefault","helper","onQueue","audio","Audio","process","currentQueue","map","item","myRef","createRef","onSubmit","onChange","type","placeholder","onClick","ref","src","SoundFile","kind","className","Timer","running","timeObj","noSleep","NoSleep","seconds","timeToSecond","enable","interval","setInterval","theTime","sec","secondToTime","clearInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b13b9704.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.23eedce0.mp3\";","import React from 'react';\n\nclass TimerQueue extends React.Component {\n  render() {\n    return (\n      <li key={this.props.id}>\n        <h1>{`${this.props.label} for ${this.props.formattedTime}`}</h1>\n      </li>\n    );\n  }\n}\n\nexport default TimerQueue;\n","const hourToSecond = 3600;\nconst minuteToSecond = 60;\n\n// Add the zero prefix for time, for example: \"7\" into \"07\"\n/**\n *\n * @param {} time\n */\nexport function addZeroPrefix(time) {\n  return (`0${time}`).slice(-2);\n}\n\n/**\n * Convert unit of time to string.\n *\n * @param {string|number} unitOfTime Unit of time to convert\n * @param {boolean} zeroPrefix Whether to add zero prefix or not\n */\nexport function timeUnitToStr(unitOfTime, zeroPrefix = true) {\n  let timeUnit = unitOfTime;\n\n  if (parseInt(unitOfTime, 10) < 10 && zeroPrefix) {\n    timeUnit = addZeroPrefix(unitOfTime);\n  }\n\n  return timeUnit;\n}\n\n/**\n * Convert time object to string with the format hh:mm:ss\n *\n * @param {object} time The time object\n */\nexport function timeToStr(time) {\n  return `${timeUnitToStr(time.hour)} : ${timeUnitToStr(time.minute)} : ${timeUnitToStr(time.second)}`;\n}\n\n/**\n * Convert an amount of seconds to time object\n *\n * @param {number} second The amount of seconds to convert\n */\nexport function secondToTime(second) {\n  let hour = 0;\n  let minute = 0;\n  let sec = 0;\n\n  if (second >= hourToSecond) {\n    // divide the second by 3600 and take the integer part\n    hour = Math.floor(second / hourToSecond);\n  }\n\n  // calculate the amount of seconds that can not be converted to hour\n  sec = second - hour * hourToSecond;\n\n  // do the same for the minute party\n  if (sec >= minuteToSecond) {\n    minute = Math.floor(sec / minuteToSecond);\n  }\n\n  sec -= minute * minuteToSecond;\n\n  return {\n    hour,\n    minute,\n    second: sec,\n  };\n}\n\n/**\n * Convert time object into seconds\n *\n * @param {object} time The time object\n */\nexport function timeToSecond(time) {\n  return (\n    parseInt(time.hour * hourToSecond, 10)\n    + parseInt(time.minute * minuteToSecond, 10)\n    + parseInt(time.second, 10)\n  );\n}\n\n/**\n * Convert smaller time unit to one level larger time unit.\n *\n * @param {number} time Time to convert\n */\nexport function toOneBiggerUnit(time) {\n  const biggerUnitTime = Math.floor(time / minuteToSecond);\n\n  return {\n    remaining: time - biggerUnitTime * minuteToSecond,\n    converted: biggerUnitTime,\n  };\n}\n\n/**\n * Normalize the time.\n *\n * @param {object} time The time Object\n */\nexport function normalizeTime(time) {\n  let hour = parseInt(time.hour, 10);\n  let minute = parseInt(time.minute, 10);\n  let second = parseInt(time.second, 10);\n\n  if (second >= minuteToSecond) {\n    second = toOneBiggerUnit(second);\n    minute = second.converted + minute;\n    second = second.remaining;\n  }\n\n  if (minute >= minuteToSecond) {\n    minute = toOneBiggerUnit(minute);\n    hour = minute.converted + hour;\n    minute = minute.remaining;\n  }\n\n  return { hour, minute, second };\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TimerQueue from './timer-queue';\nimport SoundFile from './ting.mp3';\nimport * as helper from '../helper/function';\n\nclass TimerController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      queue: [],\n      count: 0,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.queue = this.queue.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { timeRemaining } = this.props;\n    const { queue } = this.state;\n\n    // catch the moment when one cycle of timer is finished\n    if (prevProps.timeRemaining !== 0 && timeRemaining === 0) {\n      document.getElementById('ting').play();\n\n      // if queue is not empty, then continue to run\n      if (queue.length) {\n        this.runTimer();\n      }\n    }\n  }\n\n  handleInputChange(e) {\n    const { target } = e;\n\n    this.setState({\n      [target.name]: target.value ? target.value : 0,\n    });\n  }\n\n  runTimer() {\n    const { queue, count } = this.state;\n    const { onRun } = this.props;\n\n    if (queue.length <= 0) {\n      return;\n    }\n\n    const topOfQueue = queue.shift();\n\n    onRun(topOfQueue);\n\n    this.setState({\n      count: count - 1,\n    });\n  }\n\n  queue(e) {\n    e.preventDefault();\n\n    const {\n      hour = 0, minute = 0, second = 0, count, queue, label,\n    } = this.state;\n    const time = helper.normalizeTime({ hour, minute, second });\n\n    if (hour || minute || second) {\n      this.setState({\n        count: count + 1,\n        queue: [\n          ...queue,\n          {\n            id: count,\n            hour: time.hour || 0,\n            minute: time.minute || 0,\n            second: time.second || 0,\n            label: label || 'Default Label',\n            formattedTime: helper.timeToStr(time),\n          },\n        ],\n      });\n    }\n\n    const { onQueue } = this.props;\n\n    onQueue(time, count);\n  }\n\n  playSound() {\n    this.audio = new Audio(`${process.env.PUBLIC_URL}/ting.mp3`);\n    this.audio.play();\n  }\n\n  render() {\n    let currentQueue;\n    const { queue } = this.state;\n\n    if (queue.length) {\n      currentQueue = queue.map((item) => (\n        <TimerQueue\n          key={item.id}\n          label={item.label}\n          formattedTime={item.formattedTime}\n          onRun={this.runTimer}\n        />\n      ));\n    }\n\n    this.myRef = React.createRef();\n\n    return (\n      <div>\n        <form onSubmit={this.queue}>\n          <input\n            onChange={this.handleInputChange}\n            name=\"label\"\n            type=\"text\"\n            placeholder=\"label\"\n          />\n\n          <input\n            onChange={this.handleInputChange}\n            name=\"hour\"\n            type=\"number\"\n            placeholder=\"hour\"\n          />\n\n          <input\n            onChange={this.handleInputChange}\n            name=\"minute\"\n            type=\"number\"\n            placeholder=\"minute\"\n          />\n\n          <input\n            onChange={this.handleInputChange}\n            name=\"second\"\n            type=\"number\"\n            placeholder=\"second\"\n          />\n\n          <input type=\"submit\" value=\"Add to queue\" />\n          <button type=\"button\" onClick={this.runTimer}>\n            Run\n          </button>\n        </form>\n\n        <audio id=\"ting\" ref={this.myRef} src={SoundFile}>\n          <track kind=\"captions\" />\n        </audio>\n\n        <div className=\"queue\">{currentQueue}</div>\n      </div>\n    );\n  }\n}\n\nTimerController.propTypes = {\n  timeRemaining: PropTypes.number.isRequired,\n  onRun: PropTypes.func.isRequired,\n  onQueue: PropTypes.func.isRequired,\n};\n\nexport default TimerController;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport NoSleep from 'nosleep.js';\nimport TimerController from './timer-controller';\nimport {\n  timeToSecond,\n  secondToTime,\n  timeToStr,\n} from '../helper/function';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      queue: [],\n      timeRemaining: 0,\n      running: null,\n    };\n\n    this.onRun = this.onRun.bind(this);\n    this.onQueue = this.onQueue.bind(this);\n  }\n\n  onQueue(time, count) {\n    const { queue } = this.state;\n\n    this.setState({\n      queue: [\n        ...queue,\n        {\n          id: count,\n          label: time.label,\n          hour: time.hour,\n          minute: time.minute,\n          second: time.second,\n        },\n      ],\n    });\n  }\n\n  onRun(time) {\n    const timeObj = time;\n    const noSleep = new NoSleep();\n    let seconds = timeToSecond(timeObj);\n    noSleep.enable();\n\n    const interval = setInterval(() => {\n      const theTime = secondToTime(seconds);\n\n      this.setState({\n        time: timeToStr(theTime),\n        label: time.label,\n        timeRemaining: seconds,\n        running: time,\n      });\n\n      if (seconds === 0) {\n        clearInterval(interval);\n      }\n\n      seconds -= 1;\n    }, 1000);\n  }\n\n  render() {\n    const {\n      time, timeRemaining, running, label,\n    } = this.state;\n\n    return (\n      <div>\n        <div>\n          <h1>{!running ? 'Nothing is running' : `${label} for ${time}`}</h1>\n        </div>\n        <div>\n          <TimerController\n            onRun={this.onRun}\n            onQueue={this.onQueue}\n            timeRemaining={timeRemaining}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}