{"version":3,"sources":["components/ting.mp3","components/timer-queue.js","helper/function.js","components/timer-controller.js","components/modal.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimerQueue","props","id","label","formattedTime","key","className","hourToSecond","minuteToSecond","timeUnitToStr","unitOfTime","zeroPrefix","timeUnit","parseInt","slice","timeToStr","time","hour","minute","second","secondToTime","sec","Math","floor","toOneBiggerUnit","biggerUnitTime","remaining","converted","TimerController","state","queue","count","queueError","submitValue","handleInputChange","bind","runTimer","prevProps","timeRemaining","this","document","getElementById","play","length","e","target","setState","name","value","onRun","shift","preventDefault","helper","setTimeout","onQueue","audio","Audio","process","currentQueue","actionButton","showQueue","toggleQueueModal","onPause","isRunning","isPaused","onResume","inputClass","map","item","type","onClick","myRef","React","createRef","onSubmit","onChange","placeholder","ref","src","SoundFile","kind","width","height","viewBox","fill","xmlns","x","y","transform","Component","Modal","closeModal","close","children","classList","center","modalClassName","join","defaultProps","Timer","running","isFullScreen","interval","expandTimer","timeObj","noSleep","NoSleep","seconds","timeToSecond","enable","setInterval","theTime","clearInterval","taskName","taskTime","timerModal","cx","cy","r","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54bed1e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.23eedce0.mp3\";","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TimerQueue(props) {\n  const { id, label, formattedTime } = props;\n  return (\n    <li key={id} className=\"queue-item\">\n      <span className=\"queue-label one-line\">{label}</span>\n      <span className=\"queue-time\">{formattedTime}</span>\n    </li>\n  );\n}\n\nTimerQueue.propTypes = {\n  id: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  formattedTime: PropTypes.string.isRequired,\n};\n\nexport default TimerQueue;\n","const hourToSecond = 3600;\nconst minuteToSecond = 60;\n\n// Add the zero prefix for time, for example: \"7\" into \"07\"\n/**\n *\n * @param {} time\n */\nexport function addZeroPrefix(time) {\n  return (`0${time}`).slice(-2);\n}\n\n/**\n * Convert unit of time to string.\n *\n * @param {string|number} unitOfTime Unit of time to convert\n * @param {boolean} zeroPrefix Whether to add zero prefix or not\n */\nexport function timeUnitToStr(unitOfTime, zeroPrefix = true) {\n  let timeUnit = unitOfTime;\n\n  if (parseInt(unitOfTime, 10) < 10 && zeroPrefix) {\n    timeUnit = addZeroPrefix(unitOfTime);\n  }\n\n  return timeUnit;\n}\n\n/**\n * Convert time object to string with the format hh:mm:ss\n *\n * @param {object} time The time object\n */\nexport function timeToStr(time) {\n  return `${timeUnitToStr(time.hour)}:${timeUnitToStr(time.minute)}:${timeUnitToStr(time.second)}`;\n}\n\n/**\n * Convert an amount of seconds to time object\n *\n * @param {number} second The amount of seconds to convert\n */\nexport function secondToTime(second) {\n  let hour = 0;\n  let minute = 0;\n  let sec = 0;\n\n  if (second >= hourToSecond) {\n    // divide the second by 3600 and take the integer part\n    hour = Math.floor(second / hourToSecond);\n  }\n\n  // calculate the amount of seconds that can not be converted to hour\n  sec = second - hour * hourToSecond;\n\n  // do the same for the minute party\n  if (sec >= minuteToSecond) {\n    minute = Math.floor(sec / minuteToSecond);\n  }\n\n  sec -= minute * minuteToSecond;\n\n  return {\n    hour,\n    minute,\n    second: sec,\n  };\n}\n\n/**\n * Convert time object into seconds\n *\n * @param {object} time The time object\n */\nexport function timeToSecond(time) {\n  return (\n    parseInt(time.hour * hourToSecond, 10)\n    + parseInt(time.minute * minuteToSecond, 10)\n    + parseInt(time.second, 10)\n  );\n}\n\n/**\n * Convert smaller time unit to one level larger time unit.\n *\n * @param {number} time Time to convert\n */\nexport function toOneBiggerUnit(time) {\n  const biggerUnitTime = Math.floor(time / minuteToSecond);\n\n  return {\n    remaining: time - biggerUnitTime * minuteToSecond,\n    converted: biggerUnitTime,\n  };\n}\n\n/**\n * Normalize the time.\n *\n * @param {object} time The time Object\n */\nexport function normalizeTime(time) {\n  let hour = parseInt(time.hour, 10);\n  let minute = parseInt(time.minute, 10);\n  let second = parseInt(time.second, 10);\n\n  if (second >= minuteToSecond) {\n    second = toOneBiggerUnit(second);\n    minute = second.converted + minute;\n    second = second.remaining;\n  }\n\n  if (minute >= minuteToSecond) {\n    minute = toOneBiggerUnit(minute);\n    hour = minute.converted + hour;\n    minute = minute.remaining;\n  }\n\n  return { hour, minute, second };\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TimerQueue from './timer-queue';\nimport SoundFile from './ting.mp3';\nimport * as helper from '../helper/function';\n\nclass TimerController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      queue: [],\n      count: 0,\n      queueError: false,\n      submitValue: 'Add to Queue',\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.queue = this.queue.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { timeRemaining } = this.props;\n    const { queue } = this.state;\n\n    // catch the moment when one cycle of timer is finished\n    if (prevProps.timeRemaining !== 0 && timeRemaining === 0) {\n      document.getElementById('ting').play();\n\n      // if queue is not empty, then continue to run\n      if (queue.length) {\n        this.runTimer();\n      }\n    }\n  }\n\n  handleInputChange(e) {\n    const { target } = e;\n\n    this.setState({\n      [target.name]: target.value ? target.value : 0,\n    });\n  }\n\n  runTimer() {\n    const { queue, count } = this.state;\n    const { onRun } = this.props;\n\n    if (queue.length <= 0) {\n      return;\n    }\n\n    const topOfQueue = queue.shift();\n\n    onRun(topOfQueue);\n\n    this.setState({\n      count: count - 1,\n    });\n  }\n\n  queue(e) {\n    e.preventDefault();\n\n    const {\n      hour = 0, minute = 0, second = 0, count, queue, label,\n    } = this.state;\n    const time = helper.normalizeTime({ hour, minute, second });\n\n    if (!hour && !minute && !second) {\n      this.setState({\n        queueError: true,\n      });\n\n      return false;\n    }\n\n    this.setState({\n      count: count + 1,\n      submitValue: 'Added',\n      queueError: false,\n      queue: [\n        ...queue,\n        {\n          id: count,\n          hour: time.hour || 0,\n          minute: time.minute || 0,\n          second: time.second || 0,\n          label: label || 'Default Label',\n          formattedTime: helper.timeToStr(time),\n        },\n      ],\n    });\n\n    setTimeout(() => {\n      this.setState({\n        submitValue: 'Add to Queue',\n      });\n    }, 1000);\n\n    const { onQueue } = this.props;\n\n    onQueue(time, count);\n\n    return true;\n  }\n\n  playSound() {\n    this.audio = new Audio(`${process.env.PUBLIC_URL}/ting.mp3`);\n    this.audio.play();\n  }\n\n  render() {\n    let currentQueue;\n    let actionButton;\n    const { queue, queueError, submitValue } = this.state;\n    const {\n      showQueue, toggleQueueModal, onPause, isRunning, isPaused, onResume,\n    } = this.props;\n    const inputClass = queueError ? 'error' : '';\n\n    if (queue.length) {\n      currentQueue = queue.map((item) => (\n        <TimerQueue\n          key={item.id}\n          id={item.id}\n          label={item.label}\n          formattedTime={item.formattedTime}\n          onRun={this.runTimer}\n        />\n      ));\n    }\n\n    if (!isRunning) {\n      actionButton = (\n        <button\n          className=\"form-on-btn btn\"\n          type=\"button\"\n          onClick={this.runTimer}\n        >\n          Run\n        </button>\n      );\n    } else if (isRunning && !isPaused) {\n      actionButton = (\n        <button\n          className=\"form-on-btn btn\"\n          type=\"button\"\n          onClick={onPause}\n        >\n          Pause\n        </button>\n      );\n    } else {\n      actionButton = (\n        <button\n          className=\"form-on-btn btn\"\n          type=\"button\"\n          onClick={onResume}\n        >\n          Resume\n        </button>\n      );\n    }\n\n    this.myRef = React.createRef();\n\n    return (\n      <div>\n        <form onSubmit={this.queue} className=\"form\">\n\n          <div className=\"form-title\">New task</div>\n\n          <div className=\"form-control\">\n\n            <div className=\"form-group\">\n              <div className=\"form-group-label\">Give your task a name</div>\n              <div className=\"form-group-input\">\n                <input\n                  onChange={this.handleInputChange}\n                  name=\"label\"\n                  type=\"text\"\n                  placeholder=\"name\"\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <div className=\"form-group-label\">How long does it take?</div>\n              <div className=\"form-group-input\">\n                <input\n                  className={inputClass}\n                  onChange={this.handleInputChange}\n                  name=\"hour\"\n                  type=\"number\"\n                  placeholder=\"hh\"\n                />\n\n                <input\n                  className={inputClass}\n                  onChange={this.handleInputChange}\n                  name=\"minute\"\n                  type=\"number\"\n                  placeholder=\"mm\"\n                />\n\n                <input\n                  className={inputClass}\n                  onChange={this.handleInputChange}\n                  name=\"second\"\n                  type=\"number\"\n                  placeholder=\"ss\"\n                />\n              </div>\n            </div>\n\n            <input\n              className=\"form-submit-btn btn\"\n              value={submitValue}\n              type=\"submit\"\n            />\n\n            {actionButton}\n\n          </div>\n\n        </form>\n\n        <audio id=\"ting\" ref={this.myRef} src={SoundFile}>\n          <track kind=\"captions\" />\n        </audio>\n\n        {showQueue ? (\n          <div className=\"queue-modal\">\n            <div className=\"queue-modal__wrapper\">\n              <div className=\"queue-title\">current queue</div>\n\n              <button\n                type=\"button\"\n                className=\"close\"\n                onClick={toggleQueueModal}\n              >\n\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 7 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <rect\n                    x=\"0.969925\"\n                    y=\"0.434853\"\n                    width=\"0.560681\"\n                    height=\"6.72818\"\n                    transform=\"rotate(-45 0.969925 0.434853)\"\n                    fill=\"black\"\n                  />\n                  <rect x=\"5.68907\" width=\"0.560681\" height=\"6.72818\" transform=\"rotate(45 5.68907 0)\" fill=\"black\" />\n                </svg>\n\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"queue-clear btn\"\n                onClick={() => {\n                  this.setState({\n                    queue: [],\n                  });\n                }}\n              >\n                Clear\n              </button>\n\n              <ol className=\"queue\">\n                {currentQueue}\n              </ol>\n            </div>\n          </div>\n        ) : ''}\n\n      </div>\n    );\n  }\n}\n\nTimerController.propTypes = {\n  timeRemaining: PropTypes.number.isRequired,\n  onRun: PropTypes.func.isRequired,\n  onQueue: PropTypes.func.isRequired,\n  onPause: PropTypes.func.isRequired,\n  onResume: PropTypes.func.isRequired,\n  isRunning: PropTypes.bool.isRequired,\n  isPaused: PropTypes.bool.isRequired,\n  showQueue: PropTypes.bool.isRequired,\n  toggleQueueModal: PropTypes.func.isRequired,\n};\n\nexport default TimerController;\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  closeModal() {\n    const { close } = this.props;\n    close();\n  }\n\n  render() {\n    const { children, center } = this.props;\n\n    let classList = ['modal'];\n\n    if (center) {\n      classList = [...classList, 'modal--center'];\n    }\n\n    const modalClassName = classList.join(' ');\n\n    return (\n      <div className={modalClassName}>\n        <div className=\"modal-content\">\n          {children}\n          <button type=\"button\" className=\"modal-close\" onClick={this.closeModal}>\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 7 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"0.969925\" y=\"0.434853\" width=\"0.560681\" height=\"6.72818\" transform=\"rotate(-45 0.969925 0.434853)\" fill=\"black\" />\n              <rect x=\"5.68907\" width=\"0.560681\" height=\"6.72818\" transform=\"rotate(45 5.68907 0)\" fill=\"black\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  children: PropTypes.any.isRequired,\n  center: PropTypes.bool,\n  close: PropTypes.func.isRequired,\n};\n\nModal.defaultProps = {\n  center: false,\n};\n\n\nexport default Modal;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport NoSleep from 'nosleep.js';\nimport TimerController from './timer-controller';\nimport Modal from './modal';\nimport {\n  timeToSecond,\n  secondToTime,\n  timeToStr,\n} from '../helper/function';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      queue: [],\n      timeRemaining: 0,\n      running: null,\n      isRunning: false,\n      isPaused: false,\n      isFullScreen: false,\n      showQueue: false,\n      interval: null,\n    };\n\n    this.onRun = this.onRun.bind(this);\n    this.onPause = this.onPause.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onQueue = this.onQueue.bind(this);\n    this.toggleQueueModal = this.toggleQueueModal.bind(this);\n    this.expandTimer = this.expandTimer.bind(this);\n  }\n\n  onQueue(time, count) {\n    const { queue } = this.state;\n\n    this.setState({\n      queue: [\n        ...queue,\n        {\n          id: count,\n          label: time.label,\n          hour: time.hour,\n          minute: time.minute,\n          second: time.second,\n        },\n      ],\n    });\n  }\n\n  onRun(time) {\n    const timeObj = time;\n    const noSleep = new NoSleep();\n    let seconds = timeToSecond(timeObj);\n\n    noSleep.enable();\n\n    this.setState({\n      isRunning: true,\n    });\n\n    const interval = setInterval(() => {\n      const theTime = secondToTime(seconds);\n\n      this.setState({\n        time: timeToStr(theTime),\n        label: time.label,\n        timeRemaining: seconds,\n        running: time,\n        interval,\n      });\n\n      if (seconds === 0) {\n        clearInterval(interval);\n        this.setState({\n          isRunning: false,\n        });\n      }\n\n      seconds -= 1;\n    }, 1000);\n  }\n\n  onPause() {\n    const { interval } = this.state;\n\n    clearInterval(interval);\n\n    this.setState({\n      isPaused: true,\n    });\n  }\n\n  onResume() {\n    const { timeRemaining } = this.state;\n    let seconds = timeRemaining;\n\n    const interval = setInterval(() => {\n      const theTime = secondToTime(seconds);\n      this.setState({\n        time: timeToStr(theTime),\n        timeRemaining: seconds,\n        isPaused: false,\n        interval,\n      });\n\n      if (seconds === 0) {\n        clearInterval(interval);\n        this.setState({\n          isRunning: false,\n        });\n      }\n\n      seconds -= 1;\n    }, 1000);\n  }\n\n  toggleQueueModal() {\n    const { showQueue } = this.state;\n    this.setState({\n      showQueue: !showQueue,\n    });\n  }\n\n  expandTimer() {\n    const { isFullScreen } = this.state;\n    this.setState({\n      isFullScreen: !isFullScreen,\n    });\n  }\n\n  render() {\n    const {\n      time, timeRemaining, running, label, showQueue, isFullScreen, isRunning, isPaused,\n    } = this.state;\n\n    const taskName = !running ? 'Nothing' : label;\n    const taskTime = !running ? '00:00:00' : time;\n    let timerModal = '';\n\n    if (isFullScreen) {\n      timerModal = (\n        <Modal center close={this.expandTimer}>\n          <div className=\"modal-time\">{taskTime}</div>\n        </Modal>\n      );\n    }\n\n    return (\n      <div className=\"page-wrapper\">\n\n        {timerModal}\n\n        <div className=\"page-header\">\n          <div className=\"page-title\">queue -able timer</div>\n\n          <button\n            type=\"button\"\n            className=\"page-menu\"\n            onClick={this.toggleQueueModal}\n          >\n            <svg width=\"6\" height=\"22\" viewBox=\"0 0 6 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#333333\" />\n              <circle cx=\"3\" cy=\"11\" r=\"3\" fill=\"#333333\" />\n              <circle cx=\"3\" cy=\"19\" r=\"3\" fill=\"#333333\" />\n            </svg>\n          </button>\n        </div>\n\n\n        <div className=\"task\">\n          <div className=\"task-name\">{taskName}</div>\n          <div className=\"task-time\">{taskTime}</div>\n          <button type=\"button\" className=\"btn js-modal\" onClick={this.expandTimer}>Focus Mode</button>\n        </div>\n\n        <TimerController\n          onRun={this.onRun}\n          onQueue={this.onQueue}\n          onPause={this.onPause}\n          onResume={this.onResume}\n          showQueue={showQueue}\n          toggleQueueModal={this.toggleQueueModal}\n          isRunning={isRunning}\n          isPaused={isPaused}\n          timeRemaining={timeRemaining}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}